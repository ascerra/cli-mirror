# Copyright The Enterprise Contract Contributors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0

---
name: Sealights

on:
  pull_request_target:
    types: [opened, synchronize, reopened]
  push:
    branches:
      - main
      - release-*
  workflow_dispatch:

permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ (github.event_name == 'pull_request' && github.event.pull_request.number) || github.ref }}
  cancel-in-progress: true

jobs:

  Initialize:
    runs-on: ubuntu-latest
    env:
      SEALIGHTS_LOG_LEVEL: none
    outputs:
      bsid: ${{ steps.sealights-scan.outputs.bsid }}
    steps:
      - name: Determine workflow run event context
        run: echo "on-event=${{ github.event_name }}" >> $GITHUB_ENV

      - name: Handle invalid context for pull requests
        if: ${{ env.on-event == 'pull_request' && (!github.event.pull_request.head.sha || !github.event.pull_request.number) }}
        run: |
          echo "Invalid context for this workflow run. Exiting."
          exit 1

      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          # Needed in hack/derive-version.sh
          fetch-depth: 0

      - name: Restore Cache
        uses: actions/cache/restore@d4323d4df104b026a6aa633fdb11d772146be0bf # v4.2.2
        with:
          key: main
          path: '**'

      - name: Setup Go environment
        uses: actions/setup-go@f111f3307d8850f501ac008e886eec1fd1932a34 # v5.3.0
        with:
          go-version-file: go.mod
          cache: false

      - name: Check go versions
        uses: enterprise-contract/github-workflows/golang-version-check@main

      - name: Download SeaLights Go agent and CLI tool
        run: |
          echo "[Sealights] Downloading Sealights Golang & CLI Agents..."
          case $(lscpu | awk '/Architecture:/{print $2}') in
            x86_64) SL_ARCH="linux-amd64";;
            arm) SL_ARCH="linux-arm64";;
          esac
          wget -nv -O sealights-go-agent.tar.gz https://agents.sealights.co/slgoagent/latest/slgoagent-$SL_ARCH.tar.gz
          wget -nv -O sealights-slcli.tar.gz https://agents.sealights.co/slcli/latest/slcli-$SL_ARCH.tar.gz
          tar -xzf ./sealights-go-agent.tar.gz && tar -xzf ./sealights-slcli.tar.gz
          rm -f ./sealights-go-agent.tar.gz ./sealights-slcli.tar.gz
          ./slgoagent -v 2> /dev/null | grep version && ./slcli -v 2> /dev/null | grep version

      - name: Write SeaLights token into file
        run: echo "${SEALIGHTS_AGENT_TOKEN}" > sltoken.txt
        env:
          SEALIGHTS_AGENT_TOKEN: '${{secrets.SEALIGHTS_AGENT_TOKEN}}'

      - name: Initiating the SeaLights agent
        run: |
          echo "[Sealights] Initiating the SeaLights agent to Golang and handing it the token"
          ./slcli config init --lang go --token ./sltoken.txt

      - name: Configuring SeaLights - on pull_request event
        if: env.on-event == 'pull_request_target'
        run: |
          echo "[Sealights] Configuring SeaLights to scan the pull request branch"
          echo "Latest commit sha: ${LATEST_COMMIT_SHA}"
          echo "PR Number: ${PULL_REQUEST_NUMBER}"
          ./slcli config create-pr-bsid --app ec-cli-test --target-branch "main" --pull-request-number ${PULL_REQUEST_NUMBER} --latest-commit ${LATEST_COMMIT_SHA} --repository-url https://github.com/ascerra/cli-mirror.git
        env:
          PULL_REQUEST_NUMBER: ${{ github.event.pull_request.number || github.event.issue.number }}
          LATEST_COMMIT_SHA: ${{github.event.pull_request.head.sha}}

      - name: Configuring SeaLights - on push event
        if: env.on-event == 'push'
        run: |
          echo "[Sealights] Configuring SeaLights to scan the main branch after pull request was closed"
          ./slcli config create-bsid --app ec-cli-test --branch main --build ${LATEST_COMMIT_SHA}
        env:
          LATEST_COMMIT_SHA: ${{ github.sha }}

      - name: Run the SeaLights scan
        id: sealights-scan
        run: |
          echo "[Sealights] Running the SeaLights scan"
          ./slcli scan --bsid buildSessionId.txt  --path-to-scanner ./slgoagent --workspacepath ./ --scm git --scmBaseUrl https://github.com/ascerra/cli-mirror.git --scmVersion "0" --scmProvider github
          echo bsid=$(< buildSessionId.txt) | tee -a "$GITHUB_OUTPUT"
      - name: clean all SeaLights secret stuff
        run: |
          echo "[Sealights] Cleaning up after SeaLights run"
          rm sltoken.txt

      - name: Save workspace
        uses: actions/cache@v4
        with:
          path: ${{ github.workspace }}
          key: workspace-${{ github.run_id }}

  Test:
    runs-on: ubuntu-latest
    needs: Initialize
    steps:
      - name: Restore workspace
        uses: actions/cache@v4
        with:
          path: ${{ github.workspace }}
          key: workspace-${{ github.run_id }}

      - name: Harden Runner
        uses: step-security/harden-runner@4d991eb9b905ef189e4c376166672c3f2f230481 # v2.11.0
        with:
          egress-policy: audit
          disable-telemetry: true

      - name: Generate
        run: make generate

      - name: Test
        run: make test

  Acceptance:
    runs-on: ubuntu-latest
    needs: [Initialize, Test]
    timeout-minutes: 45
    env:
      BSID: ${{ needs.Initialize.outputs.bsid }}
      SEALIGHTS_LOG_LEVEL: none
      SEALIGHTS_CONNECTION_TIMEOUT: 120s
      # Add environment variables to help with KIND cluster stability
      KIND_CLUSTER_TIMEOUT: 600s
      KIND_CLUSTER_WAIT: 300s
      # Increase system limits for better stability
      KIND_CLUSTER_EXTRA_ARGS: "--wait=300s --timeout=600s"
    steps:
      - name: Restore workspace
        uses: actions/cache@v4
        with:
          path: ${{ github.workspace }}
          key: workspace-${{ github.run_id }}

      - name: Update podman
        run: |
          "${GITHUB_WORKSPACE}/hack/ubuntu-podman-update.sh"

      - name: Setup system resources for KIND cluster
        run: |
          echo "Setting up system resources for KIND cluster stability..."
          
          # Run initial debug to see system state
          echo "=== Initial System State ==="
          "${GITHUB_WORKSPACE}/hack/debug-kind-cluster.sh" || echo "Initial debug failed"
          
          # Increase inotify limits
          echo fs.inotify.max_user_watches=524288 | sudo tee -a /etc/sysctl.conf
          echo kernel.keys.maxkeys=1000 | sudo tee -a /etc/sysctl.conf
          sudo sysctl -p
          
          # Stop any existing podman services that might interfere
          sudo systemctl stop podman.socket podman.service || true
          sudo systemctl disable podman.socket podman.service || true
          
          # Clean up any existing KIND clusters that might be stuck
          kind delete cluster --all || echo "No existing clusters to delete"
          
          # Ensure KIND is available and working
          kind version || echo "KIND not available"
          
          # Check system resources after setup
          echo "=== System State After Setup ==="
          free -h
          df -h

      - name: Create a test session
        run: |
          echo "Creating Sealights test session..."
          # Temporarily disable Sealights logging during cluster startup
          export SEALIGHTS_LOG_LEVEL=none
          export SEALIGHTS_CONNECTION_TIMEOUT=120s
          
          ./slcli test start-stage --bsid=$BSID --testStage "Acceptance Tests"

      - name: Verify KIND cluster readiness
        run: |
          echo "Verifying KIND cluster is ready for acceptance tests..."
          
          # Wait a bit for any cluster operations to complete
          sleep 10
          
          # Check if KIND clusters exist and are ready
          echo "=== KIND Cluster Status ==="
          kind get clusters || echo "No KIND clusters found"
          kind get nodes || echo "No KIND nodes found"
          
          # Check if kubectl can connect to the cluster
          if kind get clusters | grep -q .; then
            echo "=== Testing kubectl connectivity ==="
            kubectl cluster-info || echo "kubectl cluster-info failed"
            kubectl get nodes || echo "kubectl get nodes failed"
            kubectl get pods --all-namespaces || echo "kubectl get pods failed"
          else
            echo "No KIND clusters found - this might be expected for stub tests"
          fi
          
          # Check system resources
          echo "=== System Resources Before Tests ==="
          free -h
          df -h

      - name: Verify Sealights configuration
        run: |
          echo "Verifying Sealights configuration..."
          
          # Check if Sealights files exist
          echo "=== Sealights Files ==="
          ls -la sltoken.txt buildSessionId.txt || echo "Sealights files not found"
          
          # Check Sealights agent status
          echo "=== Sealights Agent Status ==="
          ./slcli config list || echo "Sealights config list failed"
          
          # Check if the BSID is properly set
          echo "=== Build Session ID ==="
          cat buildSessionId.txt || echo "Build session ID file not found"
          
          # Verify Go environment
          echo "=== Go Environment ==="
          go version
          go env | grep -E "(GOOS|GOARCH|CGO)" || echo "Go environment check failed"

      - name: Run simple acceptance test
        run: |
          echo "Running a simple acceptance test to verify basic setup..."
          
          # Set up environment for Sealights
          export SEALIGHTS_LOG_LEVEL=none
          export SEALIGHTS_CONNECTION_TIMEOUT=120s
          
          # Try to run a simple test first - use a basic test that doesn't require complex setup
          cd acceptance
          echo "=== Testing basic Go test execution ==="
          go test -v -run TestFeatures/version -timeout 5m ./... || {
            echo "Simple acceptance test failed"
            echo "=== Go test output ==="
            echo "This will help identify if the issue is with Go tests or Sealights integration"
            exit 1
          }
          
          echo "Simple acceptance test passed - basic setup is working"

      - name: Acceptance test with enhanced debugging
        run: |
          echo "Starting acceptance tests with Sealights integration..."
          
          # Set up environment for stable KIND cluster operation
          export SEALIGHTS_LOG_LEVEL=none
          export SEALIGHTS_CONNECTION_TIMEOUT=120s
          export KIND_CLUSTER_TIMEOUT=600s
          export KIND_CLUSTER_WAIT=300s
          
          # Additional environment variables for Sealights stability
          export SEALIGHTS_AGENT_TOKEN_FILE="${GITHUB_WORKSPACE}/sltoken.txt"
          export SEALIGHTS_BSID_FILE="${GITHUB_WORKSPACE}/buildSessionId.txt"
          
          # Ensure Go test environment is clean
          export CGO_ENABLED=0
          export GOOS=linux
          export GOARCH=amd64
          
          echo "Current environment variables:"
          env | grep -E "(SEALIGHTS|KIND|PODMAN)" || true
          
          # Run acceptance tests with increased timeout and better error handling
          echo "=== Starting Acceptance Tests ==="
          
          # Check Sealights agent before running tests
          echo "=== Sealights Agent Pre-Test Check ==="
          ./slcli config list || echo "Sealights config list failed"
          cat buildSessionId.txt || echo "Build session ID not found"
          
          timeout 40m make acceptance-sealights 2>&1 | tee acceptance-test.log || {
            echo "Acceptance tests failed or timed out. Running debug script..."
            
            # Show the last part of the test log for debugging
            echo "=== Last 100 lines of acceptance test log ==="
            tail -100 acceptance-test.log || echo "No test log available"
            
            # Run comprehensive debug script
            echo "=== Running Debug Script ==="
            "${GITHUB_WORKSPACE}/hack/debug-kind-cluster.sh" || echo "Debug script failed"
            
            # Additional debugging for KIND cluster
            echo "=== Additional KIND Debugging ==="
            kind get clusters || echo "No KIND clusters found"
            kind get nodes || echo "No KIND nodes found"
            
            # Check for any stuck processes
            echo "=== Process Debugging ==="
            ps aux | grep -E "(kind|podman|docker)" || echo "No container processes found"
            
            # Check system resources
            echo "=== Resource Debugging ==="
            free -h
            df -h
            
            # Check for any test artifacts or logs
            echo "=== Test Artifacts ==="
            find . -name "*.log" -o -name "junit*.xml" -o -name "coverage*.out" | head -10 || echo "No test artifacts found"
            
            # Check Go test environment
            echo "=== Go Test Environment ==="
            go version
            go env | grep -E "(GOOS|GOARCH|CGO|GOPATH|GOROOT)" || echo "Go environment check failed"
            
            # Check if there are any Go test processes still running
            echo "=== Go Test Processes ==="
            ps aux | grep -E "(go|test)" | grep -v grep || echo "No Go test processes found"
            
            # Exit with failure
            exit 1
          }

      - name: Upload test results, end test session
        if: success() || failure()
        run: |
          cat ./junit-acceptance.xml
          ./slcli test upload-reports --bsid=$BSID --report-location ./junit-acceptance.xml
          ./slcli test end-stage --bsid=$BSID --executionId "Acceptance Tests"
